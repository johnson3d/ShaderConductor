variables:
  configuration: Release
  platform: x64
  prebuiltDxcUrl_Windows: 'https://ci.appveyor.com/api/buildjobs/hstx61po9r2w6rbj/artifacts/build/Release/dxc-artifacts.zip'
  prebuiltDxcUrl_Linux: 'https://ci.appveyor.com/api/buildjobs/5egi1wkhwwd353er/artifacts/build/dxc-artifacts.tar.gz'
  prebuiltDxcExtract_Windows: '7z x -odxc-artifacts dxc-artifacts.zip'
  prebuiltDxcExtract_Linux: 'tar -xvf dxc-artifacts.tar.gz'
  prebuiltDxcDir: '$(Agent.TempDirectory)/dxc-artifacts'
  testCommand_Windows: './$(buildFolder)/bin/ShaderConductorTest.exe'
  testCommand_Nix: './$(buildFolder)/bin/ShaderConductorTest'
  artifactBinaries_Windows: |
    bin/ShaderConductor.dll
    bin/ShaderConductorCmd.exe
    bin/dxcompiler.dll
    lib/ShaderConductor.lib
  artifactBinaries_Nix: |
    bin/ShaderConductorCmd
    lib/libdxcompiler.*
    lib/libShaderConductor.*

resources:
- repo: self
  fetchDepth: 5

stages:
- stage: ClangFormat
  jobs:
  - job: ClangFormat
    pool:
      vmImage: Ubuntu-20.04

    variables:
      CC: gcc
      CXX: g++

    steps:
    - bash: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install clang-format-10 ninja-build python3
      displayName: 'Install'
    - task: PythonScript@0
      displayName: 'Build'
      inputs:
        scriptPath: BuildAll.py
        arguments: 'ninja gcc linux clangformat'
    - script: |
        git diff --exit-code $(Build.SourceVersion)
      failOnStderr: true
      displayName: 'Clang-Format'

- stage: Build
  condition: succeeded('ClangFormat')
  jobs:
  - job: Build
    strategy:
      matrix:
        Windows_vc142_x86:
          vmImage: windows-2019
          compiler: vc142
          platform: x86
          combination: 'win-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: 'choco install ninja wget'
          testCommand: $(testCommand_Windows)
          artifactBinaries: $(artifactBinaries_Windows)
        Windows_vc142_x64:
          vmImage: windows-2019
          compiler: vc142
          combination: 'win-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: 'choco install ninja wget'
          prebuiltDxcUrl: $(prebuiltDxcUrl_Windows)
          prebuiltDxcExtract: $(prebuiltDxcExtract_Windows)
          testCommand: $(testCommand_Windows)
          artifactBinaries: $(artifactBinaries_Windows)
        Windows_vc142_arm64:
          vmImage: windows-2019
          compiler: vc142
          platform: arm64
          combination: 'win-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: 'choco install ninja wget'
          artifactBinaries: $(artifactBinaries_Windows)
        Windows_vc143_x64:
          vmImage: windows-2022
          compiler: vc143
          combination: 'win-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: 'choco install ninja wget'
          prebuiltDxcUrl: $(prebuiltDxcUrl_Windows)
          prebuiltDxcExtract: $(prebuiltDxcExtract_Windows)
          testCommand: $(testCommand_Windows)
          artifactBinaries: $(artifactBinaries_Windows)
        Windows_vc143_arm64:
          vmImage: windows-2022
          compiler: vc143
          platform: arm64
          combination: 'win-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: 'choco install ninja wget'
          artifactBinaries: $(artifactBinaries_Windows)
        Linux_gcc11:
          vmImage: Ubuntu-20.04
          compiler: gcc11
          combination: 'linux-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install g++-11 ninja-build python3
          prebuiltDxcUrl: $(prebuiltDxcUrl_Linux)
          prebuiltDxcExtract: $(prebuiltDxcExtract_Linux)
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: gcc-11
          CXX: g++-11
        Linux_gcc12:
          vmImage: Ubuntu-22.04
          compiler: gcc12
          combination: 'linux-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install g++-12 ninja-build python3
          # Prebuilt DXC for Linux doesn't work on Ubuntu 22.04
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: gcc-12
          CXX: g++-12
        Linux_clang14:
          vmImage: Ubuntu-20.04
          compiler: clang14
          combination: 'linux-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: |
            wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
            sudo apt-get update
            sudo apt-get install clang-14 libc++-14-dev libc++abi-14-dev lld-14 ninja-build python3
          prebuiltDxcUrl: $(prebuiltDxcUrl_Linux)
          prebuiltDxcExtract: $(prebuiltDxcExtract_Linux)
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: clang-14
          CXX: clang++-14
        Linux_clang15:
          vmImage: Ubuntu-20.04
          compiler: clang15
          combination: 'linux-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: |
            wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main"
            sudo apt-get update
            sudo apt-get install clang-15 libc++-15-dev libc++abi-15-dev lld-15 ninja-build python3
          prebuiltDxcUrl: $(prebuiltDxcUrl_Linux)
          prebuiltDxcExtract: $(prebuiltDxcExtract_Linux)
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: clang-15
          CXX: clang++-15
        macOS_11_clang:
          vmImage: macOS-11
          compiler: clang13
          combination: 'osx-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: brew install ninja
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: clang
          CXX: clang++

    pool:
      vmImage: $(vmImage)

    steps:
      - bash: eval '$(installCommand)'
        displayName: 'Install'

      - script: |
          git config --global user.email "dummy@example.com"
          git config --global user.name "Dummy Name"
        displayName: 'Config git'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true
          architecture: 'x64'

      - bash: |
          wget $(prebuiltDxcUrl)
          eval '$(prebuiltDxcExtract)'
        workingDirectory: $(Agent.TempDirectory)
        displayName: 'Download DXC package'
        condition: ne(variables.prebuiltDxcUrl, '')
        continueOnError: true

      - task: Cache@2
        inputs:
          key: 'Build | External/CMakeLists.txt | External/*.cmake | $(combination)'
          restoreKeys: 'Build | $(combination)'
          path: $(buildFolder)
        displayName: Cache Build

      - task: Cache@2
        inputs:
          key: 'External | External/CMakeLists.txt | External/*.cmake | $(combination)'
          restoreKeys: 'External | $(combination)'
          path: External
        displayName: Cache External

      - task: PythonScript@0
        displayName: 'Build'
        inputs:
          scriptPath: BuildAll.py
          arguments: 'ninja $(compiler) $(platform) $(configuration)'

      - bash: eval '$(testCommand)'
        displayName: 'Test'
        condition: ne(variables.testCommand, '')

      - bash: 'echo $BUILD_SOURCEVERSION > $BUILD_ARTIFACTSTAGINGDIRECTORY/GIT-COMMIT.txt'
        displayName: 'Add commit info'

      - task: CopyFiles@2
        displayName: 'Copy Headers'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: Include/ShaderConductor/ShaderConductor.hpp
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: CopyFiles@2
        displayName: 'Copy Binaries'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/$(buildFolder)'
          Contents: $(artifactBinaries)
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifacts'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: ShaderConductor-$(combination)
