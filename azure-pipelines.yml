variables:
  configuration: Release
  platform: x64
  prebuiltDxcUrl_Windows: 'https://ci.appveyor.com/api/buildjobs/06agstathn6otq5q/artifacts/build/Release/dxc-artifacts.zip'
  prebuiltDxcUrl_Linux: 'https://ci.appveyor.com/api/buildjobs/u8qkkqbpeg532sj4/artifacts/build/dxc-artifacts.tar.gz'
  prebuiltDxcExtract_Windows: '7z x -odxc-artifacts dxc-artifacts.zip'
  prebuiltDxcExtract_Linux: 'tar -xvf dxc-artifacts.tar.gz'
  testCommand_Windows: './$(buildFolder)/bin/ShaderConductorTest.exe'
  testCommand_Linux: './$(buildFolder)/bin/ShaderConductorTest'
  testCommand_macOS: './$(buildFolder)/bin/ShaderConductorTest'
  artifactBinaries_Windows: |
    bin/ShaderConductor.dll
    bin/ShaderConductorCmd.exe
    bin/dxcompiler.dll
    lib/ShaderConductor.lib
  artifactBinaries_Linux: |
    bin/ShaderConductorCmd
    lib/libdxcompiler.so
    lib/libShaderConductor.so
  artifactBinaries_macOS: |
    bin/ShaderConductorCmd
    lib/libdxcompiler.dylib
    lib/libShaderConductor.dylib

resources:
- repo: self
  fetchDepth: 5

stages:
- stage: ClangFormat
  jobs:
  - job: ClangFormat
    pool:
      vmImage: Ubuntu-20.04

    variables:
      CC: gcc
      CXX: g++

    steps:
    - bash: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install clang-format-10 ninja-build python3
      displayName: 'Install'
    - task: PythonScript@0
      displayName: 'Build'
      inputs:
        scriptPath: BuildAll.py
        arguments: 'ninja gcc linux clangformat'
    - script: |
        git diff --exit-code $(Build.SourceVersion)
      failOnStderr: true
      displayName: 'Clang-Format'

- stage: Build
  condition: succeeded('ClangFormat')
  jobs:
  - job: Windows_vc142_x86
    pool:
      vmImage: windows-2019

    variables:
      compiler: vc142
      platform: x86
      combination: 'win-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: 'choco install ninja wget'
      testCommand: $(testCommand_Windows)
      artifactBinaries: $(artifactBinaries_Windows)

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: Windows_vc142_x64
    pool:
      vmImage: windows-2019

    variables:
      compiler: vc142
      combination: 'win-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: 'choco install ninja wget'
      prebuiltDxcDir: '$(Agent.TempDirectory)/dxc-artifacts'
      prebuiltDxcUrl: $(prebuiltDxcUrl_Windows)
      prebuiltDxcExtract: $(prebuiltDxcExtract_Windows)
      testCommand: $(testCommand_Windows)
      artifactBinaries: $(artifactBinaries_Windows)

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: Windows_vc142_arm64
    pool:
      vmImage: windows-2019

    variables:
      compiler: vc142
      platform: arm64
      combination: 'win-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: 'choco install ninja wget'
      artifactBinaries: $(artifactBinaries_Windows)

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: Windows_vc143_x64
    pool:
      vmImage: windows-2022

    variables:
      compiler: vc143
      combination: 'win-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: 'choco install ninja wget'
      prebuiltDxcDir: '$(Agent.TempDirectory)/dxc-artifacts'
      prebuiltDxcUrl: $(prebuiltDxcUrl_Windows)
      prebuiltDxcExtract: $(prebuiltDxcExtract_Windows)
      testCommand: $(testCommand_Windows)
      artifactBinaries: $(artifactBinaries_Windows)

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: Windows_vc143_arm64
    pool:
      vmImage: windows-2022

    variables:
      compiler: vc143
      platform: arm64
      combination: 'win-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: 'choco install ninja wget'
      artifactBinaries: $(artifactBinaries_Windows)

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: Linux_gcc9
    pool:
      vmImage: Ubuntu-20.04

    variables:
      compiler: gcc9
      combination: 'linux-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install g++-9 ninja-build python3
      prebuiltDxcDir: '$(Agent.TempDirectory)/dxc-artifacts'
      prebuiltDxcUrl: $(prebuiltDxcUrl_Linux)
      prebuiltDxcExtract: $(prebuiltDxcExtract_Linux)
      testCommand: $(testCommand_Linux)
      artifactBinaries: $(artifactBinaries_Linux)
      CC: gcc-9
      CXX: g++-9

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: Linux_gcc10
    pool:
      vmImage: Ubuntu-20.04

    variables:
      compiler: gcc10
      combination: 'linux-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install g++-10 ninja-build python3
      prebuiltDxcDir: '$(Agent.TempDirectory)/dxc-artifacts'
      prebuiltDxcUrl: $(prebuiltDxcUrl_Linux)
      prebuiltDxcExtract: $(prebuiltDxcExtract_Linux)
      testCommand: $(testCommand_Linux)
      artifactBinaries: $(artifactBinaries_Linux)
      CC: gcc-10
      CXX: g++-10

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: Linux_clang11
    pool:
      vmImage: Ubuntu-20.04

    variables:
      compiler: clang11
      combination: 'linux-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: |
        wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal main"
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install clang-11 libc++-11-dev libc++abi-11-dev lld-11 ninja-build python3
      prebuiltDxcDir: '$(Agent.TempDirectory)/dxc-artifacts'
      prebuiltDxcUrl: $(prebuiltDxcUrl_Linux)
      prebuiltDxcExtract: $(prebuiltDxcExtract_Linux)
      testCommand: $(testCommand_Linux)
      artifactBinaries: $(artifactBinaries_Linux)
      CC: clang-11
      CXX: clang++-11

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: Linux_clang13
    pool:
      vmImage: Ubuntu-20.04

    variables:
      compiler: clang13
      combination: 'linux-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: |
        wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main"
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install clang-13 libc++-13-dev libc++abi-13-dev lld-13 ninja-build python3
      prebuiltDxcDir: '$(Agent.TempDirectory)/dxc-artifacts'
      prebuiltDxcUrl: $(prebuiltDxcUrl_Linux)
      prebuiltDxcExtract: $(prebuiltDxcExtract_Linux)
      testCommand: $(testCommand_Linux)
      artifactBinaries: $(artifactBinaries_Linux)
      CC: clang-13
      CXX: clang++-13

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: macOS_10_clang
    pool:
      vmImage: macOS-10.15

    variables:
      compiler: clang9
      combination: 'osx-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: brew install ninja
      testCommand: $(testCommand_macOS)
      artifactBinaries: $(artifactBinaries_macOS)
      CC: clang
      CXX: clang++

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml
