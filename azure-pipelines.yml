variables:
  configuration: Release
  platform: x64
  prebuiltDxcUrl_Windows_x64: 'https://artprodeus21.artifacts.visualstudio.com/A73ee8395-692b-4b30-bcb0-4fe7d5297417/29a70e0e-8840-4d3f-b249-ba73d30ad448/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2dvbmdtaW5taW4vcHJvamVjdElkLzI5YTcwZTBlLTg4NDAtNGQzZi1iMjQ5LWJhNzNkMzBhZDQ0OC9idWlsZElkLzEzNjMvYXJ0aWZhY3ROYW1lL2R4Yy1hcnRpZmFjdHMtV2luZG93c19WUzIwMjJfeDY0X1JlbGVhc2U1/content?format=zip'
  prebuiltDxcName_Windows_x64: 'dxc-artifacts-Windows_VS2022_x64_Release'
  prebuiltDxcUrl_Windows_arm64: 'https://artprodeus21.artifacts.visualstudio.com/A73ee8395-692b-4b30-bcb0-4fe7d5297417/29a70e0e-8840-4d3f-b249-ba73d30ad448/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2dvbmdtaW5taW4vcHJvamVjdElkLzI5YTcwZTBlLTg4NDAtNGQzZi1iMjQ5LWJhNzNkMzBhZDQ0OC9idWlsZElkLzEzNjMvYXJ0aWZhY3ROYW1lL2R4Yy1hcnRpZmFjdHMtV2luZG93c19WUzIwMjJfYXJtNjRfUmVsZWFzZQ2/content?format=zip'
  prebuiltDxcName_Windows_arm64: 'dxc-artifacts-Windows_VS2022_arm64_Release'
  prebuiltDxcUrl_Ubuntu_20_gcc: 'https://artprodeus21.artifacts.visualstudio.com/A73ee8395-692b-4b30-bcb0-4fe7d5297417/29a70e0e-8840-4d3f-b249-ba73d30ad448/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2dvbmdtaW5taW4vcHJvamVjdElkLzI5YTcwZTBlLTg4NDAtNGQzZi1iMjQ5LWJhNzNkMzBhZDQ0OC9idWlsZElkLzEzNjMvYXJ0aWZhY3ROYW1lL2R4Yy1hcnRpZmFjdHMtVWJ1bnR1XzIwX0djY18xMF94NjRfUmVsZWFzZQ2/content?format=zip'
  prebuiltDxcName_Ubuntu_20_gcc: 'dxc-artifacts-Ubuntu_20_Gcc_10_x64_Release'
  prebuiltDxcUrl_Ubuntu_22_gcc: 'https://artprodeus21.artifacts.visualstudio.com/A73ee8395-692b-4b30-bcb0-4fe7d5297417/29a70e0e-8840-4d3f-b249-ba73d30ad448/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2dvbmdtaW5taW4vcHJvamVjdElkLzI5YTcwZTBlLTg4NDAtNGQzZi1iMjQ5LWJhNzNkMzBhZDQ0OC9idWlsZElkLzEzNjMvYXJ0aWZhY3ROYW1lL2R4Yy1hcnRpZmFjdHMtVWJ1bnR1XzIyX0djY18xMl94NjRfUmVsZWFzZQ2/content?format=zip'
  prebuiltDxcName_Ubuntu_22_gcc: 'dxc-artifacts-Ubuntu_22_Gcc_12_x64_Release'
  prebuiltDxcUrl_Ubuntu_20_clang: 'https://artprodeus21.artifacts.visualstudio.com/A73ee8395-692b-4b30-bcb0-4fe7d5297417/29a70e0e-8840-4d3f-b249-ba73d30ad448/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2dvbmdtaW5taW4vcHJvamVjdElkLzI5YTcwZTBlLTg4NDAtNGQzZi1iMjQ5LWJhNzNkMzBhZDQ0OC9idWlsZElkLzEzNjMvYXJ0aWZhY3ROYW1lL2R4Yy1hcnRpZmFjdHMtVWJ1bnR1XzIwX0NsYW5nXzEwX3g2NF9SZWxlYXNl0/content?format=zip'
  prebuiltDxcName_Ubuntu_20_clang: 'dxc-artifacts-Ubuntu_20_Clang_10_x64_Release'
  prebuiltDxcUrl_Ubuntu_22_clang: 'https://artprodeus21.artifacts.visualstudio.com/A73ee8395-692b-4b30-bcb0-4fe7d5297417/29a70e0e-8840-4d3f-b249-ba73d30ad448/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2dvbmdtaW5taW4vcHJvamVjdElkLzI5YTcwZTBlLTg4NDAtNGQzZi1iMjQ5LWJhNzNkMzBhZDQ0OC9idWlsZElkLzEzNjMvYXJ0aWZhY3ROYW1lL2R4Yy1hcnRpZmFjdHMtVWJ1bnR1XzIyX0NsYW5nXzE0X3g2NF9SZWxlYXNl0/content?format=zip'
  prebuiltDxcName_Ubuntu_22_clang: 'dxc-artifacts-Ubuntu_22_Clang_14_x64_Release'
  prebuiltDxcUrl_MacOS_11_clang: 'https://artprodeus21.artifacts.visualstudio.com/A73ee8395-692b-4b30-bcb0-4fe7d5297417/29a70e0e-8840-4d3f-b249-ba73d30ad448/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2dvbmdtaW5taW4vcHJvamVjdElkLzI5YTcwZTBlLTg4NDAtNGQzZi1iMjQ5LWJhNzNkMzBhZDQ0OC9idWlsZElkLzEzNjMvYXJ0aWZhY3ROYW1lL2R4Yy1hcnRpZmFjdHMtTWFjT1NfMTFfQ2xhbmdfMTFfeDY0X1JlbGVhc2U1/content?format=zip'
  prebuiltDxcName_MacOS_11_clang: 'dxc-artifacts-MacOS_11_Clang_11_x64_Release'
  prebuiltDxcDir: '$(Agent.TempDirectory)/dxc-artifacts'
  testCommand_Windows: './$(buildFolder)/bin/ShaderConductorTest.exe'
  testCommand_Nix: './$(buildFolder)/bin/ShaderConductorTest'
  artifactBinaries_Windows: |
    bin/ShaderConductor.dll
    bin/ShaderConductorCmd.exe
    bin/dxcompiler.dll
    lib/ShaderConductor.lib
  artifactBinaries_Nix: |
    bin/ShaderConductorCmd
    lib/libdxcompiler.*
    lib/libShaderConductor.*

stages:
- stage: ClangFormat
  jobs:
  - job: ClangFormat
    pool:
      vmImage: Ubuntu-20.04

    variables:
      CC: gcc
      CXX: g++

    steps:
    - checkout: self
      fetchDepth: 1

    - script: |
        cmake -B Build -G "Unix Makefiles" -DSC_CLANGFORMAT=ON .
        cmake --build Build -t clangformat
        git diff --exit-code $(Build.SourceVersion)
      failOnStderr: true
      displayName: 'Clang-Format'

- stage: Build
  condition: succeeded('ClangFormat')
  jobs:
  - job: Build
    strategy:
      matrix:
        Windows_vc142_x64:
          vmImage: windows-2019
          compiler: vc142
          combination: 'win-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: 'choco install ninja wget'
          prebuiltDxcUrl: $(prebuiltDxcUrl_Windows_x64)
          prebuiltDxcName: $(prebuiltDxcName_Windows_x64)
          testCommand: $(testCommand_Windows)
          artifactBinaries: $(artifactBinaries_Windows)
        Windows_vc142_arm64:
          vmImage: windows-2019
          compiler: vc142
          platform: arm64
          combination: 'win-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: 'choco install ninja wget'
          prebuiltDxcUrl: $(prebuiltDxcUrl_Windows_arm64)
          prebuiltDxcName: $(prebuiltDxcName_Windows_arm64)
          artifactBinaries: $(artifactBinaries_Windows)
        Windows_vc143_x64:
          vmImage: windows-2022
          compiler: vc143
          combination: 'win-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: 'choco install ninja wget'
          prebuiltDxcUrl: $(prebuiltDxcUrl_Windows_x64)
          prebuiltDxcName: $(prebuiltDxcName_Windows_x64)
          testCommand: $(testCommand_Windows)
          artifactBinaries: $(artifactBinaries_Windows)
        Windows_vc143_arm64:
          vmImage: windows-2022
          compiler: vc143
          platform: arm64
          combination: 'win-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: 'choco install ninja wget'
          prebuiltDxcUrl: $(prebuiltDxcUrl_Windows_arm64)
          prebuiltDxcName: $(prebuiltDxcName_Windows_arm64)
          artifactBinaries: $(artifactBinaries_Windows)
        Linux_gcc11:
          vmImage: Ubuntu-20.04
          compiler: gcc11
          combination: 'linux-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install g++-11 ninja-build python3
          prebuiltDxcUrl: $(prebuiltDxcUrl_Ubuntu_20_gcc)
          prebuiltDxcName: $(prebuiltDxcName_Ubuntu_20_gcc)
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: gcc-11
          CXX: g++-11
        Linux_gcc12:
          vmImage: Ubuntu-22.04
          compiler: gcc12
          combination: 'linux-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: |
            sudo apt-get update
            sudo apt-get install g++-12 ninja-build python3
          prebuiltDxcUrl: $(prebuiltDxcUrl_Ubuntu_22_gcc)
          prebuiltDxcName: $(prebuiltDxcName_Ubuntu_22_gcc)
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: gcc-12
          CXX: g++-12
        Linux_clang14:
          vmImage: Ubuntu-20.04
          compiler: clang14
          combination: 'linux-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: |
            wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
            sudo apt-get update
            sudo apt-get install clang-14 libc++-14-dev libc++abi-14-dev lld-14 ninja-build python3
          prebuiltDxcUrl: $(prebuiltDxcUrl_Ubuntu_20_clang)
          prebuiltDxcName: $(prebuiltDxcName_Ubuntu_20_clang)
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: clang-14
          CXX: clang++-14
        Linux_clang15:
          vmImage: Ubuntu-22.04
          compiler: clang15
          combination: 'linux-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: |
            wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main"
            sudo apt-get update
            sudo apt-get install clang-15 libc++-15-dev libc++abi-15-dev lld-15 ninja-build python3
          prebuiltDxcUrl: $(prebuiltDxcUrl_Ubuntu_22_clang)
          prebuiltDxcName: $(prebuiltDxcName_Ubuntu_22_clang)
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: clang-15
          CXX: clang++-15
        macOS_11_clang:
          vmImage: macOS-11
          compiler: clang13
          combination: 'osx-$(compiler)-$(platform)-$(configuration)'
          buildFolder: 'Build/ninja-$(combination)'
          installCommand: brew install ninja
          prebuiltDxcUrl: $(prebuiltDxcUrl_MacOS_11_clang)
          prebuiltDxcName: $(prebuiltDxcName_MacOS_11_clang)
          testCommand: $(testCommand_Nix)
          artifactBinaries: $(artifactBinaries_Nix)
          CC: clang
          CXX: clang++

    pool:
      vmImage: $(vmImage)

    steps:
      - checkout: self
        fetchDepth: 5

      - bash: eval '$(installCommand)'
        displayName: 'Install'

      - script: |
          git config --global user.email "dummy@example.com"
          git config --global user.name "Dummy Name"
        displayName: 'Config git'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true
          architecture: 'x64'

      - bash: |
          wget -O dxc-artifacts.zip $(prebuiltDxcUrl)
          7z x dxc-artifacts.zip "$(prebuiltDxcName)/*"
          mv "$(prebuiltDxcName)" dxc-artifacts
        workingDirectory: $(Agent.TempDirectory)
        displayName: 'Download DXC package'
        condition: ne(variables.prebuiltDxcUrl, '')
        continueOnError: true

      - task: Cache@2
        inputs:
          key: 'Build | External/CMakeLists.txt | External/*.cmake | $(combination)'
          restoreKeys: 'Build | $(combination)'
          path: $(buildFolder)
        displayName: Cache Build

      - task: Cache@2
        inputs:
          key: 'External | External/CMakeLists.txt | External/*.cmake | $(combination)'
          restoreKeys: 'External | $(combination)'
          path: External
        displayName: Cache External

      - task: PythonScript@0
        displayName: 'Build'
        inputs:
          scriptPath: BuildAll.py
          arguments: 'ninja $(compiler) $(platform) $(configuration)'

      - bash: eval '$(testCommand)'
        displayName: 'Test'
        condition: ne(variables.testCommand, '')

      - bash: 'echo $BUILD_SOURCEVERSION > $BUILD_ARTIFACTSTAGINGDIRECTORY/GIT-COMMIT.txt'
        displayName: 'Add commit info'

      - task: CopyFiles@2
        displayName: 'Copy Headers'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: Include/ShaderConductor/ShaderConductor.hpp
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: CopyFiles@2
        displayName: 'Copy Binaries'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/$(buildFolder)'
          Contents: $(artifactBinaries)
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifacts'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: ShaderConductor-$(combination)
