#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct type_cbPNTriangles
{
    float4x4 viewProj;
    float4 lightDir;
};

struct main0_out
{
    float2 out_var_TEXCOORD0 [[user(locn0)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float3 in_var_POSITION [[attribute(1)]];
    float2 in_var_TEXCOORD [[attribute(8)]];
};

struct main0_patchIn
{
    float3 in_var_CENTER [[attribute(0)]];
    float3 in_var_POSITION3 [[attribute(2)]];
    float3 in_var_POSITION4 [[attribute(3)]];
    float3 in_var_POSITION5 [[attribute(4)]];
    float3 in_var_POSITION6 [[attribute(5)]];
    float3 in_var_POSITION7 [[attribute(6)]];
    float3 in_var_POSITION8 [[attribute(7)]];
    patch_control_point<main0_in> gl_in;
};

[[ patch(triangle, 0) ]] vertex main0_out main0(main0_patchIn patchIn [[stage_in]], constant type_cbPNTriangles& cbPNTriangles [[buffer(0)]], float3 gl_TessCoord [[position_in_patch]])
{
    main0_out out = {};
    spvUnsafeArray<float3, 3> _47 = spvUnsafeArray<float3, 3>({ patchIn.gl_in[0].in_var_POSITION, patchIn.gl_in[1].in_var_POSITION, patchIn.gl_in[2].in_var_POSITION });
    spvUnsafeArray<float2, 3> _48 = spvUnsafeArray<float2, 3>({ patchIn.gl_in[0].in_var_TEXCOORD, patchIn.gl_in[1].in_var_TEXCOORD, patchIn.gl_in[2].in_var_TEXCOORD });
    float _59 = gl_TessCoord.x * gl_TessCoord.x;
    float _60 = gl_TessCoord.y * gl_TessCoord.y;
    float _61 = gl_TessCoord.z * gl_TessCoord.z;
    float _62 = _59 * 3.0;
    float _63 = _60 * 3.0;
    float _64 = _61 * 3.0;
    out.gl_Position = cbPNTriangles.viewProj * float4(((((((((((_47[0] * _61) * gl_TessCoord.z) + ((_47[1] * _59) * gl_TessCoord.x)) + ((_47[2] * _60) * gl_TessCoord.y)) + ((patchIn.in_var_POSITION3 * _64) * gl_TessCoord.x)) + ((patchIn.in_var_POSITION4 * gl_TessCoord.z) * _62)) + ((patchIn.in_var_POSITION8 * _64) * gl_TessCoord.y)) + ((patchIn.in_var_POSITION5 * _62) * gl_TessCoord.y)) + ((patchIn.in_var_POSITION7 * gl_TessCoord.z) * _63)) + ((patchIn.in_var_POSITION6 * gl_TessCoord.x) * _63)) + ((((patchIn.in_var_CENTER * 6.0) * gl_TessCoord.z) * gl_TessCoord.x) * gl_TessCoord.y), 1.0);
    out.out_var_TEXCOORD0 = ((_48[0] * gl_TessCoord.z) + (_48[1] * gl_TessCoord.x)) + (_48[2] * gl_TessCoord.y);
    return out;
}

