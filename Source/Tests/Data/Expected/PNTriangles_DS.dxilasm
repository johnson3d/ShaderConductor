;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; TEXCOORD                 0   xy          1     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xy          1     NONE   float   xy  
;
;
; Patch Constant signature signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_TessFactor            0      w        0  TRIEDGE   float   xyzw
; POSITION                 3   xyz         0     NONE   float      w
; SV_TessFactor            1      w        1  TRIEDGE   float   xyzw
; POSITION                 4   xyz         1     NONE   float      w
; SV_TessFactor            2      w        2  TRIEDGE   float   xyzw
; POSITION                 5   xyz         2     NONE   float      w
; SV_InsideTessFactor      0   x           3   TRIINT   float   xyzw
; POSITION                 6   xyz         4     NONE   float      w
; POSITION                 7   xyz         5     NONE   float      w
; POSITION                 8   xyz         6     NONE   float      w
; CENTER                   0   xyz         7     NONE   float      w
;
; shader hash: fbed13923404e9c005f7bd4bc1b02a07
;
; Pipeline Runtime Information: 
;
; Domain Shader
; InputControlPointCount=3
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                 linear       
; TEXCOORD                 0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
;
; Patch Constant signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_TessFactor            0                              
; SV_InsideTessFactor      0                              
; POSITION                 3                              
; POSITION                 4                              
; POSITION                 5                              
; POSITION                 6                              
; POSITION                 7                              
; POSITION                 8                              
; CENTER                   0                              
;
; Buffer Definitions:
;
; cbuffer cbPNTriangles
; {
;
;   struct hostlayout.cbPNTriangles
;   {
;
;       row_major float4x4 viewProj;                  ; Offset:    0
;       float4 lightDir;                              ; Offset:   64
;   
;   } cbPNTriangles;                                  ; Offset:    0 Size:    80
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; cbPNTriangles                     cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 6, outputs: 6, patchconst: 31
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2 }
;   output 1 depends on inputs: { 0, 1, 2 }
;   output 2 depends on inputs: { 0, 1, 2 }
;   output 3 depends on inputs: { 0, 1, 2 }
;   output 4 depends on inputs: { 4 }
;   output 5 depends on inputs: { 5 }
; PCInputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 8, 9, 10, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 8, 9, 10, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 8, 9, 10, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 8, 9, 10, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.cbPNTriangles = type { [4 x <4 x float>], <4 x float> }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 2, i32 0, i8 0)  ; LoadPatchConstant(inputSigId,row,col)
  %3 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 2, i32 0, i8 1)  ; LoadPatchConstant(inputSigId,row,col)
  %4 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 2, i32 0, i8 2)  ; LoadPatchConstant(inputSigId,row,col)
  %5 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 3, i32 0, i8 0)  ; LoadPatchConstant(inputSigId,row,col)
  %6 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 3, i32 0, i8 1)  ; LoadPatchConstant(inputSigId,row,col)
  %7 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 3, i32 0, i8 2)  ; LoadPatchConstant(inputSigId,row,col)
  %8 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 4, i32 0, i8 0)  ; LoadPatchConstant(inputSigId,row,col)
  %9 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 4, i32 0, i8 1)  ; LoadPatchConstant(inputSigId,row,col)
  %10 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 4, i32 0, i8 2)  ; LoadPatchConstant(inputSigId,row,col)
  %11 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 5, i32 0, i8 0)  ; LoadPatchConstant(inputSigId,row,col)
  %12 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 5, i32 0, i8 1)  ; LoadPatchConstant(inputSigId,row,col)
  %13 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 5, i32 0, i8 2)  ; LoadPatchConstant(inputSigId,row,col)
  %14 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 6, i32 0, i8 0)  ; LoadPatchConstant(inputSigId,row,col)
  %15 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 6, i32 0, i8 1)  ; LoadPatchConstant(inputSigId,row,col)
  %16 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 6, i32 0, i8 2)  ; LoadPatchConstant(inputSigId,row,col)
  %17 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 7, i32 0, i8 0)  ; LoadPatchConstant(inputSigId,row,col)
  %18 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 7, i32 0, i8 1)  ; LoadPatchConstant(inputSigId,row,col)
  %19 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 7, i32 0, i8 2)  ; LoadPatchConstant(inputSigId,row,col)
  %20 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 8, i32 0, i8 0)  ; LoadPatchConstant(inputSigId,row,col)
  %21 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 8, i32 0, i8 1)  ; LoadPatchConstant(inputSigId,row,col)
  %22 = call float @dx.op.loadPatchConstant.f32(i32 104, i32 8, i32 0, i8 2)  ; LoadPatchConstant(inputSigId,row,col)
  %23 = call float @dx.op.domainLocation.f32(i32 105, i8 0)  ; DomainLocation(component)
  %24 = call float @dx.op.domainLocation.f32(i32 105, i8 1)  ; DomainLocation(component)
  %25 = call float @dx.op.domainLocation.f32(i32 105, i8 2)  ; DomainLocation(component)
  %26 = fmul fast float %23, %23
  %27 = fmul fast float %24, %24
  %28 = fmul fast float %25, %25
  %29 = fmul fast float %26, 3.000000e+00
  %30 = fmul fast float %27, 3.000000e+00
  %31 = fmul fast float %28, 3.000000e+00
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 0)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 0)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 0)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = fmul fast float %32, %28
  %36 = fmul fast float %33, %28
  %37 = fmul fast float %34, %28
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 1)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 1)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 1)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = fmul fast float %38, %26
  %42 = fmul fast float %39, %26
  %43 = fmul fast float %40, %26
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 2)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 2)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 2)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = fmul fast float %44, %27
  %48 = fmul fast float %45, %27
  %49 = fmul fast float %46, %27
  %50 = fmul fast float %31, %2
  %51 = fmul fast float %31, %3
  %52 = fmul fast float %31, %4
  %53 = fmul fast float %29, %5
  %54 = fmul fast float %29, %6
  %55 = fmul fast float %29, %7
  %56 = fmul fast float %31, %17
  %57 = fmul fast float %31, %18
  %58 = fmul fast float %31, %19
  %59 = fmul fast float %29, %8
  %60 = fmul fast float %29, %9
  %61 = fmul fast float %29, %10
  %62 = fmul fast float %30, %14
  %63 = fmul fast float %30, %15
  %64 = fmul fast float %30, %16
  %65 = fmul fast float %30, %11
  %66 = fmul fast float %30, %12
  %67 = fmul fast float %30, %13
  %68 = fmul fast float %20, 6.000000e+00
  %69 = fmul fast float %68, %24
  %70 = fmul fast float %69, %25
  %71 = fmul fast float %21, 6.000000e+00
  %72 = fmul fast float %71, %24
  %73 = fmul fast float %72, %25
  %74 = fmul fast float %22, 6.000000e+00
  %75 = fmul fast float %74, %24
  %76 = fmul fast float %75, %25
  %77 = fadd fast float %70, %65
  %78 = fadd fast float %77, %50
  %79 = fadd fast float %78, %41
  %80 = fmul fast float %79, %23
  %81 = fadd fast float %56, %59
  %82 = fadd fast float %81, %47
  %83 = fmul fast float %82, %24
  %84 = fadd fast float %53, %62
  %85 = fadd fast float %84, %35
  %86 = fmul fast float %85, %25
  %87 = fadd fast float %83, %80
  %88 = fadd fast float %87, %86
  %89 = fadd fast float %73, %66
  %90 = fadd fast float %89, %51
  %91 = fadd fast float %90, %42
  %92 = fmul fast float %91, %23
  %93 = fadd fast float %57, %60
  %94 = fadd fast float %93, %48
  %95 = fmul fast float %94, %24
  %96 = fadd fast float %54, %63
  %97 = fadd fast float %96, %36
  %98 = fmul fast float %97, %25
  %99 = fadd fast float %95, %92
  %100 = fadd fast float %99, %98
  %101 = fadd fast float %76, %67
  %102 = fadd fast float %101, %52
  %103 = fadd fast float %102, %43
  %104 = fmul fast float %103, %23
  %105 = fadd fast float %58, %61
  %106 = fadd fast float %105, %49
  %107 = fmul fast float %106, %24
  %108 = fadd fast float %55, %64
  %109 = fadd fast float %108, %37
  %110 = fmul fast float %109, %25
  %111 = fadd fast float %107, %104
  %112 = fadd fast float %111, %110
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = extractvalue %dx.types.CBufRet.f32 %113, 3
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %120 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %121 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %122 = extractvalue %dx.types.CBufRet.f32 %118, 3
  %123 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %124 = extractvalue %dx.types.CBufRet.f32 %123, 0
  %125 = extractvalue %dx.types.CBufRet.f32 %123, 1
  %126 = extractvalue %dx.types.CBufRet.f32 %123, 2
  %127 = extractvalue %dx.types.CBufRet.f32 %123, 3
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 0
  %130 = extractvalue %dx.types.CBufRet.f32 %128, 1
  %131 = extractvalue %dx.types.CBufRet.f32 %128, 2
  %132 = extractvalue %dx.types.CBufRet.f32 %128, 3
  %133 = fmul fast float %88, %114
  %134 = call float @dx.op.tertiary.f32(i32 46, float %100, float %119, float %133)  ; FMad(a,b,c)
  %135 = call float @dx.op.tertiary.f32(i32 46, float %112, float %124, float %134)  ; FMad(a,b,c)
  %136 = fadd fast float %135, %129
  %137 = fmul fast float %88, %115
  %138 = call float @dx.op.tertiary.f32(i32 46, float %100, float %120, float %137)  ; FMad(a,b,c)
  %139 = call float @dx.op.tertiary.f32(i32 46, float %112, float %125, float %138)  ; FMad(a,b,c)
  %140 = fadd fast float %139, %130
  %141 = fmul fast float %88, %116
  %142 = call float @dx.op.tertiary.f32(i32 46, float %100, float %121, float %141)  ; FMad(a,b,c)
  %143 = call float @dx.op.tertiary.f32(i32 46, float %112, float %126, float %142)  ; FMad(a,b,c)
  %144 = fadd fast float %143, %131
  %145 = fmul fast float %88, %117
  %146 = call float @dx.op.tertiary.f32(i32 46, float %100, float %122, float %145)  ; FMad(a,b,c)
  %147 = call float @dx.op.tertiary.f32(i32 46, float %112, float %127, float %146)  ; FMad(a,b,c)
  %148 = fadd fast float %147, %132
  %149 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 0)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %150 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 0)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %151 = fmul fast float %149, %25
  %152 = fmul fast float %150, %25
  %153 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 1)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %154 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 1)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %155 = fmul fast float %153, %23
  %156 = fmul fast float %154, %23
  %157 = fadd fast float %155, %151
  %158 = fadd fast float %156, %152
  %159 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 2)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %160 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 2)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %161 = fmul fast float %159, %24
  %162 = fmul fast float %160, %24
  %163 = fadd fast float %157, %161
  %164 = fadd fast float %158, %162
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %136)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %140)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %144)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %148)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %163)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %164)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.domainLocation.f32(i32, i8) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.loadPatchConstant.f32(i32, i32, i32, i8) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 7}
!3 = !{!"ds", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %hostlayout.cbPNTriangles* undef, !"", i32 0, i32 0, i32 1, i32 80, null}
!7 = !{[40 x i32] [i32 6, i32 6, i32 15, i32 15, i32 15, i32 0, i32 16, i32 32, i32 31, i32 15, i32 15, i32 15, i32 0, i32 15, i32 15, i32 15, i32 0, i32 15, i32 15, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i32 15, i32 15, i32 0, i32 15, i32 15, i32 15, i32 0, i32 15, i32 15, i32 15, i32 0, i32 15, i32 15, i32 15]}
!8 = !{void ()* @main, !"main", !9, !4, !36}
!9 = !{!10, !16, !19}
!10 = !{!11, !14}
!11 = !{i32 0, !"POSITION", i8 9, i8 0, !12, i8 2, i32 1, i8 3, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 7}
!14 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 1, i8 0, !15}
!15 = !{i32 3, i32 3}
!16 = !{!17, !14}
!17 = !{i32 0, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 0, i8 0, !18}
!18 = !{i32 3, i32 15}
!19 = !{!20, !22, !23, !25, !27, !29, !31, !33, !35}
!20 = !{i32 0, !"SV_TessFactor", i8 9, i8 25, !21, i8 0, i32 3, i8 1, i32 0, i8 3, null}
!21 = !{i32 0, i32 1, i32 2}
!22 = !{i32 1, !"SV_InsideTessFactor", i8 9, i8 26, !12, i8 0, i32 1, i8 1, i32 3, i8 0, null}
!23 = !{i32 2, !"POSITION", i8 9, i8 0, !24, i8 0, i32 1, i8 3, i32 0, i8 0, !13}
!24 = !{i32 3}
!25 = !{i32 3, !"POSITION", i8 9, i8 0, !26, i8 0, i32 1, i8 3, i32 1, i8 0, !13}
!26 = !{i32 4}
!27 = !{i32 4, !"POSITION", i8 9, i8 0, !28, i8 0, i32 1, i8 3, i32 2, i8 0, !13}
!28 = !{i32 5}
!29 = !{i32 5, !"POSITION", i8 9, i8 0, !30, i8 0, i32 1, i8 3, i32 4, i8 0, !13}
!30 = !{i32 6}
!31 = !{i32 6, !"POSITION", i8 9, i8 0, !32, i8 0, i32 1, i8 3, i32 5, i8 0, !13}
!32 = !{i32 7}
!33 = !{i32 7, !"POSITION", i8 9, i8 0, !34, i8 0, i32 1, i8 3, i32 6, i8 0, !13}
!34 = !{i32 8}
!35 = !{i32 8, !"CENTER", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 7, i8 0, !13}
!36 = !{i32 2, !37}
!37 = !{i32 2, i32 3}
