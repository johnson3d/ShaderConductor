#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct Scene
{
    float wallStiffness;
    float4 gravity;
    float3 planes[4];
};

struct type_cbSimulationConstants
{
    float timeStep;
    Scene scene;
};

struct Particle
{
    float2 position;
    float2 velocity;
};

struct type_RWStructuredBuffer_Particle
{
    Particle _m0[1];
};

struct type_StructuredBuffer_Particle
{
    Particle _m0[1];
};

struct ParticleForces
{
    float2 acceleration;
};

struct type_StructuredBuffer_ParticleForces
{
    ParticleForces _m0[1];
};

kernel void main0(constant void* spvBufferAliasSet0Binding0 [[buffer(0)]], const device type_StructuredBuffer_ParticleForces& particlesForcesRO [[buffer(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    constant auto& cbSimulationConstants = *(constant type_cbSimulationConstants*)spvBufferAliasSet0Binding0;
    device auto& particlesRW = *(device type_RWStructuredBuffer_Particle*)spvBufferAliasSet0Binding0;
    const device auto& particlesRO = *(const device type_StructuredBuffer_Particle*)spvBufferAliasSet0Binding0;
    float2 _50 = particlesRO._m0[gl_GlobalInvocationID.x].position;
    float2 _52 = particlesRO._m0[gl_GlobalInvocationID.x].velocity;
    float2 _54 = particlesForcesRO._m0[gl_GlobalInvocationID.x].acceleration;
    float3 _57 = float3(_50, 1.0);
    float _65 = -cbSimulationConstants.scene.wallStiffness;
    float2 _100 = _52 + ((((((_54 + (cbSimulationConstants.scene.planes[0u].xy * (precise::min(dot(_57, cbSimulationConstants.scene.planes[0u]), 0.0) * _65))) + (cbSimulationConstants.scene.planes[1u].xy * (precise::min(dot(_57, cbSimulationConstants.scene.planes[1u]), 0.0) * _65))) + (cbSimulationConstants.scene.planes[2u].xy * (precise::min(dot(_57, cbSimulationConstants.scene.planes[2u]), 0.0) * _65))) + (cbSimulationConstants.scene.planes[3u].xy * (precise::min(dot(_57, cbSimulationConstants.scene.planes[3u]), 0.0) * _65))) + cbSimulationConstants.scene.gravity.xy) * cbSimulationConstants.timeStep);
    particlesRW._m0[gl_GlobalInvocationID.x].position = _50 + (_100 * cbSimulationConstants.timeStep);
    particlesRW._m0[gl_GlobalInvocationID.x].velocity = _100;
}

