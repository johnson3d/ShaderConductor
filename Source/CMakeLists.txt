# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

if(CMAKE_C_COMPILER_ID MATCHES MSVC)
	set(CMAKE_C_FLAGS "/W4 /WX /MP /bigobj /Gw /permissive-")
	set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} /EHsc /Zc:throwingNew /Zc:strictStrings /Zc:rvalueCast /Zc:externConstexpr /std:c++17")

	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /fp:fast /Ob2 /GL /Qpar")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /fp:fast /Ob2 /GL /Qpar")
	set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /fp:fast /Ob1 /GL /Qpar")
	foreach(flagVar
		CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_MINSIZEREL)
		set(${flagVar} "${${flagVar}} /GS-")
	endforeach()

	foreach(flagVar
		CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS)
		set(${flagVar} "/pdbcompress")
	endforeach()

	foreach(flag_var
		CMAKE_EXE_LINKER_FLAGS_DEBUG CMAKE_SHARED_LINKER_FLAGS_DEBUG CMAKE_MODULE_LINKER_FLAGS_DEBUG CMAKE_STATIC_LINKER_FLAGS_DEBUG
		CMAKE_EXE_LINKER_FLAGS_MINSIZEREL CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
		CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
		CMAKE_EXE_LINKER_FLAGS_RELEASE CMAKE_SHARED_LINKER_FLAGS_RELEASE CMAKE_MODULE_LINKER_FLAGS_RELEASE CMAKE_STATIC_LINKER_FLAGS_RELEASE)
		set(${flag_var} "")
	endforeach()

	foreach(flag_var
		CMAKE_EXE_LINKER_FLAGS_DEBUG CMAKE_SHARED_LINKER_FLAGS_DEBUG CMAKE_MODULE_LINKER_FLAGS_DEBUG
		CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO)
		set(${flag_var} "${${flag_var}} /DEBUG:FASTLINK")
	endforeach()
	foreach(flag_var
		CMAKE_EXE_LINKER_FLAGS_MINSIZEREL CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
		CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
		CMAKE_EXE_LINKER_FLAGS_RELEASE CMAKE_SHARED_LINKER_FLAGS_RELEASE CMAKE_MODULE_LINKER_FLAGS_RELEASE)
		set(${flag_var} "${${flag_var}} /INCREMENTAL:NO")
	endforeach()
	foreach(flag_var
		CMAKE_EXE_LINKER_FLAGS_MINSIZEREL CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
		CMAKE_EXE_LINKER_FLAGS_RELEASE CMAKE_SHARED_LINKER_FLAGS_RELEASE CMAKE_MODULE_LINKER_FLAGS_RELEASE CMAKE_STATIC_LINKER_FLAGS_RELEASE)
		set(${flag_var} "${${flag_var}} /LTCG")
	endforeach()
	foreach(flag_var
		CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO)
		SET(${flag_var} "${${flag_var}} /LTCG:incremental")
	endforeach()	
	foreach(flag_var
		CMAKE_EXE_LINKER_FLAGS_MINSIZEREL CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
		CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
		CMAKE_EXE_LINKER_FLAGS_RELEASE CMAKE_SHARED_LINKER_FLAGS_RELEASE CMAKE_MODULE_LINKER_FLAGS_RELEASE)
		set(${flag_var} "${${flag_var}} /OPT:REF /OPT:ICF")
	endforeach()
else()
	foreach(flagVar
		CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
		set(${flagVar} "${${flagVar}} -W -Wall -Werror")
		if(NOT (ANDROID OR IOS))
			set(${flagVar} "${${flagVar}} -march=core2 -msse2")
		endif()
	endforeach()
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-missing-field-initializers")
	if(MINGW)
		foreach(flagVar
			CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
			set(${flagVar} "${${flagVar}} -Wa,-mbig-obj")
		endforeach()
	endif()
	set(CMAKE_CXX_FLAGS_DEBUG "-DDEBUG -g -O0")
	set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O2")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-DNDEBUG -g -O2")
	set(CMAKE_CXX_FLAGS_MINSIZEREL "-DNDEBUG -Os")

	if(CMAKE_C_COMPILER_ARCHITECTURE_ID MATCHES "x64")
		foreach(flagVar
			CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
			set(${flagVar} "${${flagVar}} -m64")
		endforeach()
		if(NOT MSVC)
			foreach(flagVar
				CMAKE_SHARED_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS CMAKE_EXE_LINKER_FLAGS)
				set(${flagVar} "${${flagVar}} -m64")
			endforeach()
			if(WIN32)
				set(CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} --target=pe-x86-64")
			else()
				set(CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} --target=elf64-x86-64")
			endif()
		endif()
	else()
		foreach(flagVar
			CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
			set(${flagVar} "${${flagVar}} -m32")
		endforeach()
		if(NOT MSVC)
			foreach(flagVar
				CMAKE_SHARED_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS CMAKE_EXE_LINKER_FLAGS)
				set(${flagVar} "${${flagVar}} -m32")
				if(WIN32)
					set(${flagVar} "${${flagVar}} -Wl,--large-address-aware")
				endif()
			endforeach()
			if(WIN32)
				set(CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} --target=pe-i386")
			else()
				set(CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} --target=elf32-i386")
			endif()
		endif()
	endif()
endif()

set(CMAKE_C_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
set(CMAKE_C_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
set(CMAKE_C_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
set(CMAKE_C_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL})

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)

add_subdirectory(Core)
if(SC_BUILD_TESTS)
    add_subdirectory(Tests)
endif()
if(SC_BUILD_TOOLS)
    add_subdirectory(Tools)
endif()
if(SC_WITH_CSHARP)
    add_subdirectory(Wrapper)
endif()
